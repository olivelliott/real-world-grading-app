generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  email     String
  firstName String
  lastName  String
  social    Json

  // Relation Fields
  courses      CourseEnrollment[]
  testResults  TestResult[]       @relation(name: "studentResults")
  testGradedBy TestResult[]       @relation(name: "gradedBy")
}

model Course {
  id               Int                @id @default(autoincrement())
  name             String
  courseDetails    Json
  tests            Test[]
  courseEnrollment CourseEnrollment[]
}

model Test {
  id        Int      @id @default(autoincrement())
  updatedAt DateTime @updatedAt
  name      String
  date      DateTime
  courseId  Int

  // Relation Fields
  course      Course       @relation(fields: [courseId], references: [id])
  testResults TestResult[]
}

model TestResult {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  result    Int // Percentage precise to one decimal point respresented as `result * 10^-1`

  // Relation Fields
  graderId  Int
  gradedBy  User @relation("gradedBy", fields: [graderId], references: [id])
  studentId Int
  student   User @relation("studentResults", fields: [studentId], references: [id])
  testId    Int
  test      Test @relation(fields: [testId], references: [id])
}

model CourseEnrollment {
  createdAt DateTime @default(now())
  role      UserRole

  // Relation Fields
  userId   Int
  user     User   @relation(fields: [userId], references: [id])
  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  @@id([userId, courseId, role])
}

enum UserRole {
  STUDENT
  TEACHER
}

// enum TokenType {
//   EMAIL // used as a short lived token sent to the user's email
//   API
// }
